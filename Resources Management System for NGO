

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class NGOResourceManagement {

    
    private static final String DB_URL = "jdbc:mysql://localhost:3306/ngo_management";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "password";

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new NGOResourceManagement().createAndShowGUI();
        });
    }

    private void createAndShowGUI() {
        JFrame frame = new JFrame("NGO Resource Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 1));
        JButton manageDonorsButton = new JButton("Manage Donors");
        JButton manageResourcesButton = new JButton("Manage Resources");
        JButton manageDistributionsButton = new JButton("Manage Distributions");

        manageDonorsButton.addActionListener(e -> openDonorManagement());
        manageResourcesButton.addActionListener(e -> openResourceManagement());
        manageDistributionsButton.addActionListener(e -> openDistributionManagement());

        panel.add(manageDonorsButton);
        panel.add(manageResourcesButton);
        panel.add(manageDistributionsButton);

        frame.add(panel);
        frame.setVisible(true);
    }

    private void openDonorManagement() {
        JFrame donorFrame = new JFrame("Manage Donors");
        donorFrame.setSize(500, 300);
        donorFrame.setLayout(new BorderLayout());

        JTable donorTable = new JTable();
        JScrollPane scrollPane = new JScrollPane(donorTable);
        donorFrame.add(scrollPane, BorderLayout.CENTER);

        JButton addDonorButton = new JButton("Add Donor");
        addDonorButton.addActionListener(e -> addDonor());
        donorFrame.add(addDonorButton, BorderLayout.SOUTH);

        loadDonors(donorTable);

        donorFrame.setVisible(true);
    }

    private void openResourceManagement() {
        JFrame resourceFrame = new JFrame("Manage Resources");
        resourceFrame.setSize(500, 300);
        resourceFrame.setLayout(new BorderLayout());

        JTable resourceTable = new JTable();
        JScrollPane scrollPane = new JScrollPane(resourceTable);
        resourceFrame.add(scrollPane, BorderLayout.CENTER);

        JButton addResourceButton = new JButton("Add Resource");
        addResourceButton.addActionListener(e -> addResource());
        resourceFrame.add(addResourceButton, BorderLayout.SOUTH);

        loadResources(resourceTable);

        resourceFrame.setVisible(true);
    }

    private void openDistributionManagement() {
        JFrame distributionFrame = new JFrame("Manage Distributions");
        distributionFrame.setSize(500, 300);
        distributionFrame.setLayout(new BorderLayout());

        JTable distributionTable = new JTable();
        JScrollPane scrollPane = new JScrollPane(distributionTable);
        distributionFrame.add(scrollPane, BorderLayout.CENTER);

        JButton addDistributionButton = new JButton("Add Distribution");
        addDistributionButton.addActionListener(e -> addDistribution());
        distributionFrame.add(addDistributionButton, BorderLayout.SOUTH);

        loadDistributions(distributionTable);

        distributionFrame.setVisible(true);
    }

    private void addDonor() {
        String name = JOptionPane.showInputDialog("Enter Donor Name:");
        String contact = JOptionPane.showInputDialog("Enter Donor Contact:");

        try (Connection conn = connectToDatabase();
             PreparedStatement stmt = conn.prepareStatement("INSERT INTO donors (name, contact) VALUES (?, ?)");) {
            stmt.setString(1, name);
            stmt.setString(2, contact);
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Donor added successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to add donor: " + e.getMessage());
        }
    }

    private void addResource() {
        String name = JOptionPane.showInputDialog("Enter Resource Name:");
        int quantity = Integer.parseInt(JOptionPane.showInputDialog("Enter Resource Quantity:"));

        try (Connection conn = connectToDatabase();
             PreparedStatement stmt = conn.prepareStatement("INSERT INTO resources (name, quantity) VALUES (?, ?)");) {
            stmt.setString(1, name);
            stmt.setInt(2, quantity);
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Resource added successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to add resource: " + e.getMessage());
        }
    }

    private void addDistribution() {
        String resourceName = JOptionPane.showInputDialog("Enter Resource Name:");
        String beneficiary = JOptionPane.showInputDialog("Enter Beneficiary Name:");
        int quantity = Integer.parseInt(JOptionPane.showInputDialog("Enter Quantity Distributed:"));

        try (Connection conn = connectToDatabase();
             PreparedStatement stmt = conn.prepareStatement("INSERT INTO distributions (resource_name, beneficiary, quantity) VALUES (?, ?, ?)");) {
            stmt.setString(1, resourceName);
            stmt.setString(2, beneficiary);
            stmt.setInt(3, quantity);
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Distribution added successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to add distribution: " + e.getMessage());
        }
    }

    private void loadDonors(JTable table) {
        try (Connection conn = connectToDatabase();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM donors")) {
            table.setModel(buildTableModel(rs));
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to load donors: " + e.getMessage());
        }
    }

    private void loadResources(JTable table) {
        try (Connection conn = connectToDatabase();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM resources")) {
            table.setModel(buildTableModel(rs));
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to load resources: " + e.getMessage());
        }
    }

    private void loadDistributions(JTable table) {
        try (Connection conn = connectToDatabase();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM distributions")) {
            table.setModel(buildTableModel(rs));
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to load distributions: " + e.getMessage());
        }
    }

    private Connection connectToDatabase() {
        try {
            return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database connection failed: " + e.getMessage());
            return null;
        }
    }

    private static javax.swing.table.TableModel buildTableModel(ResultSet rs) throws SQLException {
        java.sql.ResultSetMetaData metaData = rs.getMetaData();

        int columnCount = metaData.getColumnCount();
        java.util.Vector<String> columnNames = new java.util.Vector<>();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        java.util.Vector<java.util.Vector<Object>> data = new java.util.Vector<>();
        while (rs.next()) {
            java.util.Vector<Object> vector = new java.util.Vector<>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }

        return new javax.swing.table.DefaultTableModel(data, columnNames);
    }
}
